{"/home/travis/build/npmtest/node-npmtest-gulp-imageisux/test.js":"/* istanbul instrument in package npmtest_gulp_imageisux */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-imageisux/lib.npmtest_gulp_imageisux.js":"/* istanbul instrument in package npmtest_gulp_imageisux */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_imageisux = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_imageisux = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-imageisux/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-imageisux && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_imageisux */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_imageisux\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_imageisux.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_imageisux.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_imageisux.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_imageisux.__dirname + '/lib.npmtest_gulp_imageisux.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-imageisux/node_modules/gulp-imageisux/index.js":"var through = require('through2');\nvar request = require('request');\nvar gutil = require('gulp-util');\nvar needle = require('needle');\nvar path = require('path');\nvar fs = require('fs');\n\n// global\nvar _abspath;\nvar enableWebp;\nvar file_dirname;\n\n// if err, write the origin file instead\nfunction write_originfile(file_name){\n    if(file_dirname!==undefined){\n        // read file\n        fs.readFile(file_dirname+'/'+file_name,'',function(err,body){\n            if(err){\n                gutil.log('[error]', file_name +' cannot read...');\n            }\n            else{\n                var DEST_DIR;\n                if(_abspath!==\"\"){\n                    DEST_DIR = file_dirname + _abspath;\n                }else{\n                    DEST_DIR = file_dirname + \"/dest/\";\n                }\n\n                fs.exists(DEST_DIR,function(exists){\n                    if(!exists){\n                        fs.mkdirSync(DEST_DIR);\n                    }\n                });\n\n                var fd = DEST_DIR + file_name;\n\n                // read file\n                fs.writeFile(fd, body, function(err, data){\n                    if (err) {\n                        // gutil.log('[error]', '[fun write_originfile]'+ file_name +' cannot write, will be write again...');\n                        // if err, write to file twice\n                        fs.writeFile(fd, body, function(err, data){\n                            if (err) {\n                              gutil.log('[error]', file_name +' cannot write! Error info:'+err);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    }\n    else{\n        gutil.log('[error]', 'file_dirname is not exist!');\n    }\n}\n\nfunction imageisux (abspath,enableWebp) {\n    var stream = through.obj(function(file,encoding,callback){\n        _abspath = abspath || \"\";\n        enableWebp = enableWebp || false;\n        var _that = this;\n        if (file.isNull()) {\n            this.push(file);\n            return callback();\n        }\n\n        if (file.isStream()) {\n            throw PluginError(PLUGIN_NAME, \"Stream is not supported\");\n            return callback();\n        }\n\n        if (file.isBuffer()) {\n            var file_path = file.path;\n            file_dirname = path.dirname(file.path);\n            var file_name = path.basename(file.path);\n            var file_type = path.extname(file.path);\n            file_type = file_type.slice(1,file_type.length);\n\n            // surport jpg,png,gif\n            if(file_type=='png'||file_type=='jpg'||file_type=='jpeg'||file_type=='gif'){\n                var data = {\n                    fileSelect: {file: file_path, content_type: 'image/'+file_type },\n                    webp:enableWebp\n                };\n\n                needle.post('http://zhitu.isux.us/index.php/preview/upload_file', data, {multipart:true}, function(err, resp ,body) {\n                    if(err){\n                        gutil.log('[error]', file_name+' cannot post to the server.');\n                        write_originfile(file_name);\n                    }\n                    else{\n                        // server will return a json\n                        if(body.indexOf('{')>-1){\n                            try{\n                                // format the json\n                                var str = '({'+body.split('{')[1]+')';\n                                var json_str = eval(str);\n\n                                /*\n                                * output: origin type of compressed images\n                                * output_webp: webp type of compressed images\n                                * output_code: the status code\n                                * size: images size\n                                */\n                                var output = json_str.output;\n                                var output_webp = json_str.output_webp;\n                                var output_code = json_str.code;\n                                var size = json_str.size;\n\n                                /*\n                                * all the images return\n                                * type=1：origin\n                                * type=2：webp\n                                */\n                                var output_ary = new Array();\n                                // abspath is exist and need not use webp\n                                if(_abspath!==\"\" && enableWebp===false){\n                                    if(output!==undefined){\n                                        output_ary.push({'type':1,'url':output});\n                                    }\n                                    else{ \n                                        gutil.log('[error]','The return image '+file_name+' does not exist!');\n                                    }\n                                }\n\n                                // abspath is not exist, so init /dest/ and /webp/ and give the origin and webp-types.\n                                // if abspath is exist, so output the images to /abspath/ and give the webp-types to /webp/.\n                                else{\n                                    if(output!==undefined){\n                                        output_ary.push({'type':1,'url':output});\n                                    }\n                                    else{ \n                                        gutil.log('[error]',file_name+' cannot turn to origin-type!');\n                                    }\n\n                                    if(output_webp!==undefined){\n                                        output_ary.push({'type':2,'url':output_webp});\n                                    }\n                                    else{\n                                        gutil.log('[error]',file_name+' cannot turn to webp-type!');\n                                    }\n                                }\n\n                                var FILE_CONTENT = file_name.split('.'+file_type);\n                                var FILENAME = FILE_CONTENT[0];\n                                var FILETYPE = file_type;\n\n                                for(var i = 0; i < output_ary.length; i++){\n                                    (function(){\n                                        var PREFIX = \"\";\n                                        var APPENDFIX = \".\"+FILETYPE;\n                                        var OUTPUT_TYPE = output_ary[i].type;\n                                        switch(OUTPUT_TYPE){\n                                            case 1: PREFIX = \"\";APPENDFIX = '.'+FILETYPE;break;\n                                            case 2: PREFIX = \"\";APPENDFIX = \".webp\";break;\n                                            default:PREFIX=\"\";break;\n                                        }\n                                        \n                                        // download the image from server\n                                        needle.get(output_ary[i].url, function(err, resp, body) {\n                                            if(body) {\n                                                if(_abspath!==\"\"&&OUTPUT_TYPE==1){\n                                                    var DEST_DIR = file_dirname + \"/\" + _abspath + \"/\";\n                                                }\n                                                else if(OUTPUT_TYPE==1){\n                                                    var DEST_DIR = file_dirname + \"/dest/\";\n                                                }\n                                                else if(OUTPUT_TYPE==2){\n                                                    var DEST_DIR = file_dirname + \"/webp/\";\n                                                }\n\n                                                var fd = DEST_DIR + PREFIX + FILENAME + APPENDFIX;\n\n                                                // make dir\n                                                fs.exists(DEST_DIR,function(exists){\n                                                    if(!exists){\n                                                        fs.mkdirSync(DEST_DIR);\n                                                    }\n                                                });\n\n                                                fs.writeFile(fd, body, function(err, data){\n                                                    if (err) {\n                                                        // gutil.log('[error]', PREFIX + FILENAME + APPENDFIX +' cannot write, will be write again...');\n                                                        // if err, write to file twice\n                                                        fs.writeFile(fd, body, function(err, data){\n                                                            if (err) {\n                                                              gutil.log('[error]', PREFIX + FILENAME + APPENDFIX +' cannot write! Error info:'+err);\n                                                              write_originfile(file_name);\n                                                            }\n                                                        });\n                                                    }\n                                                });\n                                            } else {\n                                                gutil.log('[error]','The data of '+file_name+' returned is not exist!');\n                                                write_originfile(file_name);\n                                            }\n                                        });\n                                    })(i);\n                                }\n                            }\n                            catch(err){\n                                gutil.log('[error]','Format json data err, the filename is:'+ file_name);\n                                write_originfile(file_name);\n                            }\n\n                        }\n                        else{\n                            gutil.log('[error]','The data returned has error! The file name is:'+file_name);\n                            write_originfile(file_name);\n                        }\n                    }\n                });\n            }\n        }\n        _that.push(file);\n        callback();\n    });\n    return stream;\n}\n\nmodule.exports = imageisux;\n"}